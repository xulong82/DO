x = pheno.list[[1]]
str(x)
head(x)
x[1]
head(x[sample(1:n.sample)])
x <- x[sample(1:n.sample)]
head9x
head9x
head(x)
y = 1
for (i in 1:10) {
y1 <- scanone(pheno = x, probs = founder.probs, K = kinship, addcovar = covar, snps = muga_snps)
y1 <- rbind(y1$lod$A, y1$lod$X)$lod
y <- c(y, y1)
}
x = pheno.list[[1]]
head(x)
x <- x[sample(1:n.sample), ]
head(x)
x <- x[sample(1:n.sample), ]
x = pheno.list[[1]]
y = sample(x)
head(y)
hist(x)
hist(y)
head(x)
dimnames(x)
dimnames(y)
dimnames(y) <- dimnames(x)
str(x)
dimnames(as.matrix(y)) <- dimnames(x)
head(x)
rownames(y) = rownames(x)
head(y)
dim(y)
head(sample(x))
matrix(y)
y = matrix(y)
dimnames(y) = dimnames(x)
head(y)
head(x)
x = pheno.list[[1]]
x1 <- matrix(sample(x))
head(x1)
hist(x1)
dimnames(x1) <- dimnames(x)
y = 1
for (i in 1:10) {
y1 <- scanone(pheno = x, probs = founder.probs, K = kinship, addcovar = covar, snps = muga_snps)
y1 <- rbind(y1$lod$A, y1$lod$X)$lod
y <- c(y, y1)
}
str(y)
head(y)
dim(founder.probs)
head(y[-1])
str(y[-1])
head(x)
x1 <- matrix(sample(x))
dimnames(x1) <- dimnames(x)
head(x1)
data0 <- data.frame(pheno = x1[, 1], covar = covar[, 1])
g0 <- lm(pheno ~ ., data = data0)
for (i in 1:10) {
print(i)
y1 <- rep(0, n.geno)
for (j in 1:n.geno) {
data1 <- data.frame(pheno = x1[, 1], covar = covar[, 1], founder.probs[, , j])
g1 <- lm(pheno ~ ., data = data1)
lrt <- 2 * (logLik(g1) - logLik(g0))  # Likelihood ratio test
lod <- lrt / (2 * log(10))  # Lod
y1[j] <- lod
}
y <- c(y, y1)
}
str(y)
str(y1)
y = 1
for (i in 1:2) {
print(i)
y1 <- rep(0, n.geno)
for (j in 1:n.geno) {
data1 <- data.frame(pheno = x1[, 1], covar = covar[, 1], founder.probs[, , j])
g1 <- lm(pheno ~ ., data = data1)
lrt <- 2 * (logLik(g1) - logLik(g0))  # Likelihood ratio test
lod <- lrt / (2 * log(10))  # Lod
y1[j] <- lod
}
y <- c(y, y1)
}
str(y)
head(y)
hist(y)
pheno.list[[1:2]]
pheno.list[[]][1:2]
pheno.list[1:2]
str(pheno.list[1:2])
str(pheno.list[[1]])
mc.scanone.perm <- function (x) {  # 64 samples, each permute 100 times
y = 1
for (i in 1:n.perm) {  # permutation times
x1 <- matrix(sample(x))
dimnames(x1) <- dimnames(x)
y1 <- scanone(pheno = x1, probs = founder.probs, K = kinship, addcovar = covar, snps = muga_snps)
y1 <- rbind(y1$lod$A, y1$lod$X)$lod
y <- c(y, y1)
}
return(y[-1])
}
n.perm <- 10
n.perm <- 5
time.start <- strptime(date(), "%a %b %d %H:%M:%S %Y")
doqtl.perm.list <- mclapply(pheno.list[1:2], mc.scanone.perm, mc.cores = 5)
time.end <- strptime(date(), "%a %b %d %H:%M:%S %Y")
difftime(time.end, time.start, units = "auto")
str(doqtl.perm.list)
5 * n.geno
hist(doqtl.perm.list[[1]])
hist(doqtl.perm.list[[2]])
s = doqtl.perm.list[[1]]
head(s)
s = rep(s, 1000)
str(s)
rm(s)
load("~/Dropbox/DO/my.snps.rdt")
head(my.snps)
load("~/Dropbox/DO/R/myanalysis1.rdt")
head(muga_snps)
setwd("./Dropbox/DO/R")
dir()
load("allDO.genotypes.Rdata")
head(geno)
str(geno)
rm(list=ls())
load("allDO.genotypes.Rdata")
geno[grep("chesler"), ]
geno[grep("chesler", rownames(geno)), ]
s = geno[grep("chesler", rownames(geno)), ]
str(s)
s[1:5, 1:5]
load("~/Dropbox/DO/R/myanalysis1.rdt")
rm(list=ls())
load("~/Dropbox/DO/R/allDO.genotypes.Rdata")
geno.ac <- geno[grep("chesler", rownames(geno)), ]  # genotype in allele call
rm(geno)
str(geno)
str(geno.ac)
table(geno.ac[, 1])
names(table(geno.ac[, 1]))
table(geno.ac[, 2])
table(geno.ac[, 3])
table(geno.ac[, 10])
names(table(geno.ac[, 1]))[-c("H", "N")]
names(table(geno.ac[, 1]))["H"]
names(table(geno.ac[, 1]))
s = names(table(geno.ac[, 1]))
s %in% c("A", "T", "C", "G")
s[s %in% c("A", "T", "C", "G")]
s1 = s[s %in% c("A", "T", "C", "G")]
s1[1]
s1[2]
s3 = table(geno.ac[, 1])
s3
s3["G"]
max(s3)
names(max(s3))
rm(s*)
rm(s)
rm(s1, s3)
x = geno.ac[, 1]
ac1 <- table(x)
ac1
ac2 <- names(ac1)
ac2
ac3 <- ac1[ac2 %in% c("A", "T", "C", "G")]
ac3
ac3 <- intersect(ac2, c("A", "T", "C", "G"))
ac3
ac4 <- ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2])
ac4
ac3[1]
ac3[2]
str(ac4)
names(ac4)
names(x)
str(x)
names(ac4) <- "NULL"
ac4
ac4 <- ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2])
ac4
unname(ac4)
myAc <- function (x) {
ac1 <- table(x)
ac2 <- names(ac1)
ac3 <- intersect(ac2, c("A", "T", "C", "G"))
ac4 <- ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2])
return(unname(ac4))
}
ac4 <- ifelse(ac1[ac3[1]] > ac1[ac3[2]], c(ac3[1], ac3[2]), c(ac3[2], ac3[1]))
ac4
ref <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2]))
alt <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[2], ac3[1]))
ref
alt
c(ref, alt)
myAc <- function (x) {
ac1 <- table(x)
ac2 <- names(ac1)
ac3 <- intersect(ac2, c("A", "T", "C", "G"))
ref <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2]))
alt <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[2], ac3[1]))
return(c(ref, alt))
}
myRef <- function (x) {
ac1 <- table(x)
ac2 <- names(ac1)
ac3 <- intersect(ac2, c("A", "T", "C", "G"))
ref <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[1], ac3[2]))
alt <- unname(ifelse(ac1[ac3[1]] > ac1[ac3[2]], ac3[2], ac3[1]))
return(c(ref, alt))
}
refs <- apply(geno.ac, 2, myRef)
str(refs)
head(refs)
refs[1:10, 1:2]
refs[1:2, 1:10]
x = geno.ac[, 5]
table(x)
s = table(x)
s
s[-"N"]
s["N"]
s[-"N",]
str(s)
as.matrix(s)
s = as.matrix(s)
s
s["N"]
s[1,]
s[-"N",]
s[N,]
s["N",]
s[-grep("N", rownames(s)),]
s[-grep("[NH]", rownames(s)),]
str(x)
ac1 <- as.matrix(table(x))
ac2 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac1
ac2
rank(ac2)
x = geno.ac[, 1]
ac1 <- as.matrix(table(x))
ac2 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac2
rank(ac2)
sort(ac2)
?sort
sort(ac2, decreasing = T)
ac3 <- sort(ac2, decreasing = T)
ac3
names(ac3)
names(ac3)[1]
ac3
x = geno.ac[, 5]
ac1 <- as.matrix(table(x))
ac2 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac1
ac2
ac3 <- sort(ac2, decreasing = T)
ac3
names(ac3)
names(ac3)[1]
myRef <- function (x) {
ac1 <- as.matrix(table(x))
ac2 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac3 <- sort(ac2, decreasing = T)
return(names(ac3)[1])
}
refs <- apply(geno.ac, 2, myRef)
head(refs)
ac1 <- as.matrix(table(x))
ac2 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac2
length(ac2)
refs[1:10]
table(refs)
table(unlist(refs))
s = unlist(refs)
head(s)
table(s)
s[1:10]
s[1:100]
?if
)
myRef <- function (x) {
ac1 <- as.matrix(table(x))
ac1 <- ac1[-grep("[NH]", rownames(ac1)), ]
if (length(ac1) == 0) {
y = "U"
} else {
y <- names(sort(ac2, decreasing = T))[1]
}
return(y)
}
refs <- apply(geno.ac, 2, myRef)
head(refs)
table(refs)
x = geno.ac[, 6]
ac1 <- as.matrix(table(x))
ac1 <- ac1[-grep("[NH]", rownames(ac1)), ]
ac1
ac1 <- as.matrix(table(x))
ac1
rownames(ac1)
s = grep("[NH]", rownames(ac1))
s
names(ac1)
ac1 <- as.matrix(table(x))
names(ac1)
rownames(ac1)
y1 <- as.matrix(table(x))
y1
y1 <- y1[-grep("[NH]", rownames(y1)), ]
y1
y1 <- y1[-grep("N", rownames(y1)), ]
y1 <- as.matrix(table(x))
y1 <- y1[-grep("N", rownames(y1)), ]
y1
y1 <- y1[-grep("N", rownames(y1)), ]
y1 <- as.matrix(table(x))
grep("N", rownames(y1))
grep("T", rownames(y1))
y1 <- as.matrix(table(x))
y2 <- y1[-grep("N", rownames(y1)), ]
y2
x = geno.ac[, 1]
y1 <- as.matrix(table(x))
y1
y2 <- y1[-grep("[NH]", rownames(y1)), ]
y2
y2 <- y1[-grep("N", rownames(y1)), ]
y2
y2 <- y1[-grep("[NH]", rownames(y1)), ]
y2
y2 <- y1[-grep("S", rownames(y1)), ]
y2
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
y2
y1[y2, ]
x = geno.ac[, 6]
y1 <- as.matrix(table(x))
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
y1
y2
if (length(y2) == 0) {
y = "U"
} else {
y <- names(sort(y1[y2, ], decreasing = T))[1]
}
y
x = geno.ac[, 5]
y1 <- as.matrix(table(x))
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
y1
y2
myRef <- function (x) {
y1 <- as.matrix(table(x))
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
if (length(y2) == 0) {
y = "U"
} else {
y <- names(sort(y1[y2, ], decreasing = T))[1]
}
return(y)
}
refs <- apply(geno.ac, 2, myRef)
head(refs)
table(refs)
refs[1:100]
table(geno.ac[, 1])
table(geno.ac[, 2])
table(geno.ac[, 3])
table(geno.ac[, 4])
table(geno.ac[, 5])
table(geno.ac[, 6])
table(geno.ac[, 7])
table(geno.ac[, 8:10])
table(geno.ac[, 8])
table(refs)
str(refs)
str(geno.ac)
s = c(1:10)
s
str(s)
s[2] = NULL
s
table(refs)
table(geno.ac[, ])
s = matrix(nrow = 2, ncol = 2)
s
s[1, 1] = 1
s
str(s)
s = rep(n=10)
s
s = rep(NULL, n=10)
s
s[1] = 1
s[2] = 2
s
geno.bi <- matrix(nrow = nrow(geno.ac), ncol = ncol(geno.ac))
str(geno.bi)
str(geno.ac)
geno.bi <- NULL(geno.ac)
geno.bi <- as.null(geno.ac)
geno.bi
str(geno.bi)
geno.bi <- matrix(nrow = nrow(geno.ac), ncol = ncol(geno.ac))
dimnames(geno.bi) <- dimnames(geno.ac)
str(geno.bi)
refs[j]
refs[2]
date
for (i in 1:nrow(geno.ac)) {
for (j in 1:ncol(geno.ac)) {
if (geno.ac[i, j] == refs[j]) {
geno.bi[i, j] <- 0
} else if (geno.ac[i, j] == "H") {
geno.bi[i, j] <- 1
} else if (geno.ac[i, j] == "N") {
geno.bi[i, j] <- geno.bi[i, j]
} else {
geno.bi[i, j] <- 2
}
}
}
date
date()
date()
str(geno.ac)
str(geno.bi)
table(geno.bi)
geno.bi[1:100, 1:100]
rm(list=ls())
load("~/Dropbox/DO/R/allDO.genotypes.Rdata")
geno.ac <- geno[grep("chesler", rownames(geno)), ]  # genotype in allele call
rm(geno)
myRef <- function (x) {
y1 <- as.matrix(table(x))
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
if (length(y2) == 0) {
y = "U"
} else {
y <- names(sort(y1[y2, ], decreasing = T))[1]
}
return(y)
}
refs <- apply(geno.ac, 2, myRef)
geno.bi <- matrix(nrow = nrow(geno.ac), ncol = ncol(geno.ac))
dimnames(geno.bi) <- dimnames(geno.ac)
for (i in 1:nrow(geno.ac)) {
for (j in 1:ncol(geno.ac)) {
if (geno.ac[i, j] == refs[j]) {
geno.bi[i, j] <- 0
} else if (geno.ac[i, j] == "H") {
geno.bi[i, j] <- 1
} else if (geno.ac[i, j] == "N") {
geno.bi[i, j] <- geno.bi[i, j]
} else {
geno.bi[i, j] <- 2
}
}
}
load("~/Dropbox/DO/R/myanalysis1.rdt")
geno.bi[1:10, 1:10]
rownames(geno.ac) <- gsub("chesler", "", rownames(geno.ac))
rm(geno)
myRef <- function (x) {
y1 <- as.matrix(table(x))
y2 <- intersect(rownames(y1), c("A", "T", "C", "G"))
if (length(y2) == 0) {
y = "U"
} else {
y <- names(sort(y1[y2, ], decreasing = T))[1]
}
return(y)
}
refs <- apply(geno.ac, 2, myRef)
geno.bi <- matrix(nrow = nrow(geno.ac), ncol = ncol(geno.ac))
dimnames(geno.bi) <- dimnames(geno.ac)
for (i in 1:nrow(geno.ac)) {
for (j in 1:ncol(geno.ac)) {
if (geno.ac[i, j] == refs[j]) {
geno.bi[i, j] <- 0
} else if (geno.ac[i, j] == "H") {
geno.bi[i, j] <- 1
} else if (geno.ac[i, j] == "N") {
geno.bi[i, j] <- geno.bi[i, j]
} else {
geno.bi[i, j] <- 2
}
}
}
head(geno.bi)
geno.bi[1:10, 1:10]
pheno[1:10, 1:10]
founder.probs[1:10,1, 1:10]
str(intersect(rownames(geno.bi), colnames(pheno)))
str(rownames(geno.bi))
geno <- geno.bi[colnames(pheno), ]
str(geno)
geno[1:10, 1:10]
